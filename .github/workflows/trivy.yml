name: Build & Trivy Scan (local with summary)

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

env:
  IMAGE_NAME: mi-aplicacion-java:latest

jobs:
  build-trivy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java & Maven
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: maven

      - name: Build with Maven (no tests)
        run: |
          set -eux
          mvn -v
          mvn clean package -DskipTests

      - name: Build Docker image (local only)
        run: |
          set -eux
          docker --version
          echo "Building $IMAGE_NAME"
          docker build -t "$IMAGE_NAME" .

      # ---- TRIVY SCAN (tabla en logs) ----
      - name: Trivy scan (console table)
        run: |
          set -eux
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image \
              --scanners vuln \
              --exit-code 0 \            # no falla el job
              --no-progress \
              --format table \
              --severity CRITICAL,HIGH,MEDIUM,LOW \
              "$IMAGE_NAME"

      # ---- TRIVY SCAN (JSON para resumen) ----
      - name: Trivy scan (JSON for summary)
        run: |
          set -eux
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v "$PWD":/workspace \
            aquasec/trivy:latest image \
              --scanners vuln \
              --exit-code 0 \
              --no-progress \
              --format json \
              -o /workspace/trivy-image.json \
              --severity CRITICAL,HIGH,MEDIUM,LOW \
              "$IMAGE_NAME"
          ls -l trivy-image.json

      # ---- RESUMEN EN EL JOB SUMMARY ----
      - name: Build Markdown summary
        run: |
          set -eux
          echo "### Trivy summary for \`$IMAGE_NAME\`" > trivy-summary.md
          echo "" >> trivy-summary.md
          jq -r '
            def vulns: [.Results[].Vulnerabilities[]?];
            def c(sev): (vulns | map(select(.Severity==sev)) | length);
            "Total findings: \((vulns|length))",
            "CRITICAL: \(c(\"CRITICAL\"))  |  HIGH: \(c(\"HIGH\"))  |  MEDIUM: \(c(\"MEDIUM\"))  |  LOW: \(c(\"LOW\"))",
            "",
            "#### Top findings (max 20)",
            "| Severity | ID | Package | Installed | Fixed | Resource |",
            "|---|---|---|---|---|---|",
            (vulns
              | sort_by(.Severity) | reverse
              | .[:20]
              | map("| \(.Severity) | \(.VulnerabilityID) | `\(.PkgName)` | \(.InstalledVersion // "-") | \(.FixedVersion // "-") | \(.Target // "-") |")
              | .[]
            )
          ' trivy-image.json >> trivy-summary.md

          # Mostrar tambiÃ©n un enlace a JSON
          echo "" >> trivy-summary.md
          echo "_El JSON completo se adjunta como artefacto en esta corrida._" >> trivy-summary.md

          # Publicar en el Job Summary
          cat trivy-summary.md >> "$GITHUB_STEP_SUMMARY"

      # Artefactos para descargar
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: |
            trivy-image.json
            trivy-summary.md
          if-no-files-found: error
