pipeline {
  agent { label 'controller' }

  environment {
    APP_NAME     = 'mi-application'
    PROJECT_ID   = 'hypnotic-epoch-411523'
    REGION       = 'us-central1'
    REPO         = 'cna-github'
    REGISTRY     = "${REGION}-docker.pkg.dev"
    GCLOUD_CREDS = credentials('gcloud-creds') // Secret file (ruta al JSON)
    IMAGE_NAME   = "${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO}/${APP_NAME}:latest"
  }

  stages {
    stage('Build con Maven') {
      agent { docker { image 'maven:3.9.6-eclipse-temurin-17' } }
      steps {
        sh '''
          set -eux
          mvn -v
          mvn clean package -DskipTests
        '''
        archiveArtifacts artifacts: 'target/*.jar', fingerprint: true, onlyIfSuccessful: true
      }
    }

    stage('Auth GCloud (opcional)') {
      agent { docker { image 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim' } }
      steps {
        sh '''
          set -eux
          gcloud --version
          gcloud auth activate-service-account --key-file="${GCLOUD_CREDS}"
          gcloud config set project "${PROJECT_ID}"
          gcloud auth configure-docker "${REGISTRY}" --quiet
          echo "Building ${IMAGE_NAME}"
          docker build -t "${IMAGE_NAME}" .
          docker push "${IMAGE_NAME}"
        '''
      }
    }

    stage('Docker Build & Push (main)') {
      when {
        expression {
          def b = (env.BRANCH_NAME ?: env.GIT_BRANCH ?: '').trim()
          b == 'main' || b == 'origin/main' || b == 'refs/heads/main' || b.endsWith('/main')
        }
      }

      steps {
        sh '''
          set -eux
          docker --version
          copyArtifacts filter: 'target/*.jar',
                      fingerprintArtifacts: true,
                      projectName: '${JOB_NAME}',
                      flatten: true,
                      selector: specific('${BUILD_NUMBER}'),
                      target: 'target';
          # Login directo a Artifact Registry con la SA (GCLOUD_CREDS es ruta a archivo)
          gcloud auth activate-service-account --key-file="${GCLOUD_CREDS}"
          gcloud config set project "${PROJECT_ID}"
          echo "Building ${IMAGE_NAME}"
          docker build -t "${IMAGE_NAME}" .
          docker push "${IMAGE_NAME}"
        '''
      }
    }

    stage('Deploy a Cloud Run (main)') {
      when {
        expression {
          def b = (env.BRANCH_NAME ?: env.GIT_BRANCH ?: '').trim()
          b == 'main' || b == 'origin/main' || b == 'refs/heads/main' || b.endsWith('/main')
        }
      }
      agent { docker { image 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim' } }
      steps {
        sh '''
          set -eux
          gcloud auth activate-service-account --key-file="${GCLOUD_CREDS}"
          gcloud config set project "${PROJECT_ID}"

          gcloud run deploy "${APP_NAME}" \
            --image "${IMAGE_NAME}" \
            --region "${REGION}" \
            --platform managed \
            --allow-unauthenticated
        '''
      }
    }
  }
}
