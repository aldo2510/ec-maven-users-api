pipeline {
    agent any
    environment {
        IMAGE_NAME = "mi-aplicacion-java"
        IMAGE_TAG = "latest"
        DOCKERFILE_PATH = "Dockerfile"
        ACR_REGISTRY = "azcontainerregistrycna.azurecr.io"
        APP_NAME = "myapp"
    }

    stages {

        stage('Escaneo de secretos (Yelp detect-secrets)') {
            agent {
                // Reutiliza el nodo para que vea el workspace
                docker { image 'python:3.11-slim'; args '-u 0'; reuseNode true }
            }
            steps {
                sh '''
                    set -euxo pipefail

                    python -V
                    pip install --no-cache-dir "detect-secrets==1.5.0"

                    # Archivos/directorios a excluir (ajusta según tu repo)
                    EXCLUDES='(\\.git/|node_modules/|target/|build/|dist/|\\.secrets\\.(baseline|new|diff)$)'

                    if [ -f ".secrets.baseline" ]; then
                      echo "Usando baseline existente (.secrets.baseline)"
                      detect-secrets scan --all-files --baseline .secrets.baseline --exclude-files "$EXCLUDES" > .secrets.diff
                      OUTFILE=".secrets.diff"
                    else
                      echo "No hay baseline; escaneando todo el repo"
                      detect-secrets scan --all-files --exclude-files "$EXCLUDES" > .secrets.new
                      OUTFILE=".secrets.new"
                    fi

                    # Fallar el build si hay resultados
python - "$OUTFILE" << 'PY'
  import json, sys
  p = sys.argv[1]
  with open(p) as f:
      data = json.load(f)
  results = data.get('results', {})
  count = sum(len(v) for v in results.values())
  print(f"Archivo de resultados: {p}")
  print(f"Posibles secretos encontrados: {count}")
  sys.exit(1 if count > 0 else 0)
  PY
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: '.secrets.*', allowEmptyArchive: true
                }
                failure {
                    echo 'Se detectaron posibles secretos. Revisa los artefactos (.secrets.*) para detalles.'
                }
            }
        }

        stage('Compilar con Maven') {
            agent {
                docker { image 'maven:3.8.4-openjdk-17-slim' }
            }
            steps {
                sh 'mvn clean package'
                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true, onlyIfSuccessful: true
            }
        }

        stage('Build Image') {
            steps {
                copyArtifacts filter: 'target/*.jar',
                              fingerprintArtifacts: true,
                              projectName: '${JOB_NAME}',
                              flatten: true,
                              selector: specific('${BUILD_NUMBER}'),
                              target: 'target'
                sh "docker build -t ${ACR_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} -f ${DOCKERFILE_PATH} ."
            }
        }

        stage('Publish Image') {
            steps {
                script {
                    //sh 'docker login ${ACR_REGISTRY} -u ${DOCKER_CREDS_USR} -p ${DOCKER_CREDS_PSW}'
                    //sh 'docker tag ${ACR_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} ${ACR_REGISTRY}/${IMAGE_NAME}:$BUILD_NUMBER'
                    //sh 'docker push ${ACR_REGISTRY}/${IMAGE_NAME}:$BUILD_NUMBER'
                    sh 'docker logout'
                }
            }
        }
    }

    post {
        success {
            echo 'La compilación y las pruebas fueron exitosas.'
        }
        failure {
            echo 'Hubo un error en la compilación o las pruebas.'
        }
    }
}
